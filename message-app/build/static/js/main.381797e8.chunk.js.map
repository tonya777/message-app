{"version":3,"sources":["Components/MessageComponent.js","App.js","serviceWorker.js","index.js"],"names":["MessageComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onRecieveData","data","setState","visible","messageId","onRecieveUsers","resipients","state","undefined","messageSubject","messageText","recipients","onDismiss","bind","assertThisInitialized","onSubmit","handleSubjectChange","handleRecipientsChanged","e","preventDefault","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","Id","Subject","then","response","json","target","value","react_default","a","createElement","className","reactstrap_es","for","name","id","onChange","placeholder","type","multiple","map","index","key","handleMessageChanged","color","isOpen","toggle","Component","App","Components_MessageComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.381797e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Alert } from 'reactstrap';\r\nimport fetch from 'isomorphic-fetch';\r\n\r\nimport SelectPopover from 'react-select-popover';\r\n\r\nclass MessageComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            visible: false,\r\n            messageId: undefined,\r\n            messageSubject: undefined,\r\n            messageText: undefined,\r\n            recipients: undefined\r\n        };\r\n\r\n        this.onDismiss = this.onDismiss.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.handleSubjectChange = this.handleSubjectChange.bind(this);\r\n        this.handleRecipientsChanged = this.handleRecipientsChanged.bind(this);\r\n    }\r\n\r\n    onDismiss() {\r\n        this.setState({\r\n            visible: false\r\n        });\r\n    }\r\n\r\n    onRecieveData = (data) => {\r\n        this.setState({\r\n            visible: true,\r\n            messageId: data.messageId\r\n        });\r\n    }\r\n\r\n    onRecieveUsers = (data) => {\r\n        this.setState({\r\n            resipients: data\r\n        });\r\n\r\n        //this.props.recipients = data;\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        fetch('https://localhost:44324/api/app/',\r\n            {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                method: \"POST\",\r\n                body: JSON.stringify({ Id: \"test\", Subject: 'dddd' })\r\n            })\r\n            .then(response => response.json())\r\n            .then(this.onRecieveData);\r\n    }\r\n\r\n    handleSubjectChange(e) {\r\n        this.setState({\r\n            messageSubject: e.target.value\r\n        });\r\n    }\r\n\r\n    handleMessageChanged(e) {\r\n        this.setState({\r\n            messageText: e.target.value\r\n        });\r\n    }\r\n\r\n    handleRecipientsChanged(e) {\r\n        this.setState({\r\n            recipients: e.target.value\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://localhost:44324/api/app/',\r\n            {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                method: \"Get\"\r\n            })\r\n            .then(response => response.json())\r\n            .then(this.onRecieveUsers);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-container\" onSubmit={this.onSubmit}>\r\n\r\n                <Form>\r\n                    <FormGroup>\r\n                        <Label for=\"subject\">Subject</Label>\r\n                        <Input name=\"subject\" id=\"subject\" onChange={this.handleSubjectChange} placeholder=\"Enter message subject\" />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"recipients\">Select Recipients</Label>\r\n                        <Input type=\"select\" name=\"selectMulti\" id=\"recipients\" multiple onChange={this.handleRecipientsChanged}>\r\n                            {this.state.recipients ? this.state.recipients.map(function (name, index) {\r\n                                return <option key={index}>{name}</option>;\r\n                            }) : null}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"exampleText\">Message</Label>\r\n                        <Input type=\"textarea\" name=\"text\" id=\"exampleText\" placeholder=\"Enter message text\" onChange={this.handleMessageChanged} />\r\n                    </FormGroup>\r\n                    <Button>Submit</Button>\r\n                </Form>\r\n                <Alert color=\"info\" isOpen={this.state.visible} toggle={this.onDismiss}>\r\n                    {this.state.messageId}\r\n                </Alert>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageComponent;","import React, { Component } from 'react';\nimport './App.css';\n\nimport MessageComponent from './Components/MessageComponent'\n\nclass App extends Component {\n  render() {\n    return (\n      <MessageComponent />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}